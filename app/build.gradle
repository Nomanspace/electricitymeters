plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.beryx.jlink' version '2.25.0'
}

group = 'org.nomanspace'
version = '1.0.0'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    implementation 'info.picocli:picocli:4.7.5'
    implementation 'com.google.guava:guava:33.4.6-jre'

    // Apache POI for Excel export
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    // Реализация логгера для Log4j2 (должна попасть в runtime-имидж)
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.commons:commons-math3:3.6.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    modularity.inferModulePath = true
}

application {
    mainModule = 'org.nomanspace.electricitymeters' // Наш главный модуль
    mainClass = 'org.nomanspace.electricitymeters.App'
    applicationDefaultJvmArgs = ['-Dfile.encoding=UTF-8', '-Dconfig.file=../config.properties']
}

// Опциональный лог в файл при запуске через Gradle: включается только если передан -Plog=true
tasks.named('run', JavaExec).configure {
    if (project.hasProperty('log') && project.property('log').toString().toBoolean()) {
        args '--log'
    }
}

def customOutputDir = 'C:/MyBuilds/ElectricityApp'

jlink {
    imageZip = project.file("${buildDir}/distributions/ElectricityMetersApp-${project.version}.zip")
    imageName = 'ElectricityMetersApp'
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    // Объединяем log4j-api и log4j-core в merged module, чтобы корректно собрать JPMS-имидж
    forceMerge 'log4j-api', 'log4j-core'
    // Добавляем uses-предикат, чтобы ServiceLoader видел провайдеры Log4j2 в merged module
    mergedModule {
        uses 'org.apache.logging.log4j.spi.Provider'
    }
    launcher {
        name = 'ElectricityMetersApp'
        mainClass = application.mainClass
        jvmArgs = application.applicationDefaultJvmArgs
    }
    jpackage {
        //imageName = application.applicationName
        appVersion = project.version.toString()
        //installerName = application.applicationName
        installerName = 'ElectricityMetersApp'
        vendor = 'Dante Kaff CO'
        installerType = 'exe' // Для Windows
        jpackageHome =  'C:\\Program Files\\Zulu\\zulu-17'
        imageOptions = ['--win-console']
        installerOptions = [
            '--win-shortcut',
            '--win-menu',
            '--win-dir-chooser',
            '--win-menu-group', 'ElectricityMetersApp'
        ]
    }
}

jar {
    archiveBaseName.set('ElectricityMetersApp')
    archiveVersion.set('1.0.0')
}

task copyConfig(type: Copy) {
    from(project.rootDir) {
        include 'config.properties'
    }
    into(customOutputDir)
}

// Копируем собранный jpackage image в пользовательскую папку после сборки
task copyJpackageImage(type: Copy) {
    dependsOn tasks.named('jpackageImage')
    from("$buildDir/jpackage/ElectricityMetersApp")
    into(customOutputDir)
}

// Сначала копируем образ, затем кладём рядом config.properties
tasks.named('jpackageImage').configure {
    finalizedBy copyJpackageImage
}

tasks.named('copyJpackageImage').configure {
    finalizedBy copyConfig
}

tasks.named('test') {
    enabled = true // Временно отключаем тесты
    useJUnitPlatform()
}

// Унифицируем кодировку компилятора, чтобы избежать проблем с символами
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}